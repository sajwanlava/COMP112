#BlueJ class context
comment0.params=value
comment0.target=void\ brightness(float)
comment0.text=\r\n\ CORE\r\n\ \r\n\ Make\ the\ image\ brighter\ or\ darker.\r\n\ \ The\ value\ is\ between\ -1.0\ and\ 1.0\r\n\ \ Sets\ the\ fraction\ to\ move\ the\ color\ towards\ the\ min\ max\r\n
comment1.params=oldColor\ maximumValue\ val
comment1.target=int\ newCol(int,\ int,\ float)
comment10.params=angle
comment10.target=void\ rotate(double)
comment10.text=\r\n\ COMPLETION\r\n\r\n\ Rotate\ the\ image\ by\ the\ specified\ angle.\r\n\ Rotates\ around\ the\ center\ of\ the\ image,\ or\ around\ the\ center\r\n\ of\ the\ selected\ region\ if\ there\ is\ a\ selected\ region.\r\n
comment11.params=
comment11.target=ImageProcessor()
comment11.text=\ Construct\ a\ new\ ImageProcessor\ object\r\n\ and\ set\ up\ the\ GUI\r\n
comment12.params=
comment12.target=void\ buttonSave()
comment12.text=Respond\ to\ button\ presses
comment13.params=
comment13.target=void\ buttonCommit()
comment14.params=num
comment14.target=void\ sliderBrightness(double)
comment14.text=Respond\ to\ sliders\ changes
comment15.params=
comment15.target=void\ buttonHorizontalFlip()
comment16.params=
comment16.target=void\ buttonVerticalFlip()
comment17.params=
comment17.target=void\ buttonRotate90clockwise()
comment18.params=
comment18.target=void\ buttonRotate90anticlockwise()
comment19.params=
comment19.target=void\ buttonLoadMerge()
comment2.params=
comment2.target=void\ horizontalFlip()
comment2.text=\r\n\ CORE\r\n\ \r\n\ Flip\ the\ image\ horizontally\r\n
comment20.params=num
comment20.target=void\ sliderMerge(double)
comment21.params=
comment21.target=void\ buttonCropZoom()
comment22.params=
comment22.target=void\ buttonBlur()
comment23.params=num
comment23.target=void\ sliderRotate(double)
comment24.params=action\ x\ y
comment24.target=void\ doMouse(java.lang.String,\ double,\ double)
comment24.text=\r\n\ Respond\ to\ mouse\ events\ "pressed",\ "released"".\r\n\ If\ mouseAction\ field\ is\ "none",\ then\ pressed\ and\ released\ set\ the\ region\r\n\ (can\ be\ on\ either\ of\ the\ working\ or\ the\ image).\r\n\ If\ mouseAction\ field\ is\ "pour",\ then\ released\ will\ pour\ the\ current\ paint\r\n\ \ at\ the\ point.\r\n
comment25.params=array
comment25.target=int\ rows(java.awt.Color[][])
comment25.text=\r\n\ Returns\ the\ number\ of\ rows\ in\ an\ image\r\n
comment26.params=array
comment26.target=int\ cols(java.awt.Color[][])
comment26.text=\r\n\ Returns\ the\ number\ of\ columns\ in\ an\ image\r\n
comment27.params=x\ y
comment27.target=int[]\ getRowColAtMouse(double,\ double)
comment27.text=\r\n\ Returns\ the\ row\ and\ column\ of\ the\ image\ that\ the\ point\ (x,\ y)\ is\ on.\r\n\ Note\ that\ the\ user\ may\ be\ clicking\ on\ the\ working\ image\ or\ the\ original\ image.\r\n
comment28.params=
comment28.target=void\ doLoad()
comment28.text=\r\n\ Loads\ an\ image\ from\ a\ file\ into\ both\ the\ current\ image\ and\ the\ working\ image\r\n
comment29.params=imageName
comment29.target=java.awt.Color[][]\ loadImage(java.lang.String)
comment29.text=\r\n\ Load\ image\ from\ a\ file\ and\ return\ as\ a\ two-dimensional\ array\ of\ Color.\r\n
comment3.params=
comment3.target=void\ verticalFlip()
comment3.text=\r\n\ CORE\r\n\ \r\n\ Flip\ the\ image\ vertically\r\n
comment30.params=
comment30.target=void\ checkWorking()
comment30.text=\r\n\ Ensures\ that\ the\ working\ image\ is\ the\ same\ size\ as\ the\ current\ image.\r\n\ Makes\ a\ new\ working\ image\ array\ if\ not.\r\n
comment31.params=
comment31.target=void\ clearWorking()
comment31.text=\r\n\ Set\ the\ working\ image\ to\ all\ {0,0,0}\ (needed\ for\ convolution}\r\n
comment32.params=from
comment32.target=java.awt.Color[][]\ copyImage(java.awt.Color[][])
comment32.text=\r\n\ Make\ a\ deep\ copy\ of\ an\ image\ array\r\n
comment33.params=
comment33.target=void\ redisplay()
comment33.text=\ ReDisplay\ the\ images\ (image\ and\ working)\ each\ pixel\ as\ a\ square\ of\ size\ 1\r\n\ \ Called\ after\ each\ button\ pressed.\r\n
comment34.params=img\ left
comment34.target=void\ displayImage(java.awt.Color[][],\ double)
comment35.params=arguments
comment35.target=void\ main(java.lang.String[])
comment4.params=
comment4.target=void\ rotate90clockwise()
comment4.text=\r\n\ CORE\r\n\ \r\n\ Rotate\ the\ image\ 90\ degrees\ clockwise\r\n
comment5.params=
comment5.target=void\ rotate90anticlockwise()
comment5.text=\r\n\ CORE\r\n\ \r\n\ Rotate\ the\ image\ 90\ degrees\ anticlockwise\r\n
comment6.params=factor
comment6.target=void\ merge(float)
comment6.text=\ \r\n\ CORE\r\n\r\n\ Merges\ the\ current\ image\ and\ the\ toMerge\ image,\ if\ there\ is\ one.\r\n\ Work\ out\ the\ rows\ and\ columns\ shared\ by\ the\ images\r\n\ For\ each\ pixel\ value\ in\ the\ shared\ region,\ replace\ the\ current\ pixel\ value\r\n\ by\ the\ average\ of\ the\ pixel\ value\ in\ current\ image\ and\ the\ corresponding\r\n\ pixel\ value\ in\ the\ other\ image.\r\n
comment7.params=
comment7.target=void\ saveImage()
comment7.text=\r\n\ CORE\r\n\r\n\ Write\ the\ current\ image\ to\ a\ file\r\n
comment8.params=
comment8.target=void\ cropAndZoom()
comment8.text=\r\n\ COMPLETION\r\n\r\n\ Scales\ the\ currently\ selected\ region\ of\ the\ image\ (if\ there\ is\ one)\ to\ fill\r\n\ the\ working\ image.\r\n\ This\ is\ a\ combination\ scale,\ translate,\ and\ crop.\r\n
comment9.params=weights
comment9.target=void\ convolve(float[][])
comment9.text=\ \r\n\ COMPLETION\r\n\r\n\ CONVOLVE\ \ Matrix\ \ \ \r\n\ \ \ Modify\ each\ pixel\ to\ make\ it\ a\ weighted\ average\ of\ itself\ and\ the\ pixels\ around\ it\r\n\ \ \ A\ simple\ blur\ will\ weight\ the\ pixel\ by\ 0.4,\ its\ horizontal\ and\ vertical\ neighbours\ by\ 0.1,\ \r\n\ \ \ and\ the\ diagonal\ neighbours\ by\ 0.05.\r\n\ Hint\:\ It\ is\ easier\ to\ make\ a\ new\ image\ array\ of\ the\ same\ size\ as\ the\ image,\r\n\ \ \ \ \ \ \ then\ work\ out\ the\ weighted\ averages\ in\ the\ new\ array\ and\ then\ assign\ the\ new\ array\ to\ the\ image\ field.\r\n
numComments=36
