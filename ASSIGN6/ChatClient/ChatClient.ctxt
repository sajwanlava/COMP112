#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment0.text=\r\n\ main\:\ construct\ a\ new\ ChatClient\r\n
comment1.params=
comment1.target=ChatClient()
comment1.text=\ \r\n\ Sets\ up\ the\ user\ interface.\r\n
comment2.params=
comment2.target=void\ connect()
comment2.text=\r\n\ If\ there\ is\ currently\ an\ active\ socket,\ it\ should\ close\ the\r\n\ \ connection\ and\ set\ the\ socket\ to\ null.\r\n\ Creates\ a\ socket\ connected\ to\ the\ server.\ \r\n\ Creates\ a\ Scanner\ on\ the\ input\ stream\ of\ the\ socket,\ \r\n\ \ and\ a\ PrintStream\ on\ the\ output\ stream\ of\ the\ socket.\r\n\ Logs\ in\ to\ the\ server\ (calling\ the\ loginToServer\ Message)\r\n\ Once\ login\ is\ successful,\ starts\ a\ separate\ thread\ to\r\n\ \ listen\ to\ the\ server\ and\ process\ the\ messages\ from\ it.\r\n
comment3.params=
comment3.target=boolean\ login()
comment3.text=\r\n\ Attempt\ to\ log\ in\ to\ the\ Server\ and\ return\ true\ if\ successful,\ false\ if\ not.\r\n\ \ Ask\ user\ for\ username\ and\ real\ name\r\n\ \ Send\ info\ to\ server\ (NICK\ command\ and\ USER\ command)\r\n\ \ Read\ lines\ from\ server\ until\ get\ a\ message\ containing\ 004\ (success)\ or\r\n\ \ \ a\ message\ containing\ 433\ (failure\ -\ nickname\ in\ use)\r\n\ \ (For\ debugging,\ at\ least,\ print\ out\ all\ lines\ from\ the\ server)\r\n
comment4.params=msg
comment4.target=void\ send(java.lang.String)
comment4.text=\r\n\ Send\ a\ message\ to\ the\ current\ server\:\r\n\ \ -\ check\ that\ the\ socket\ and\ the\ serverOut\ are\ not\ null\r\n\ \ -\ print\ the\ message\ with\ a\ \\r\\n\ at\ the\ end\ to\ serverOut\r\n\ \ -\ flush\ serverOut\ (to\ ensure\ the\ message\ is\ sent)\r\n
comment5.params=
comment5.target=void\ join()
comment6.params=
comment6.target=void\ listenToServer()
comment6.text=\r\n\ Method\ run\ in\ the\ the\ thread\ that\ is\ listening\ to\ the\ server.\r\n\ Loop\ as\ long\ as\ there\ is\ anything\ in\ the\ serverIn\ scanner\:\r\n\ \ \ Get\ and\ process\ the\ next\ line\ of\ input\ from\ the\ scanner\r\n\ \ \ Simple\ version\:\ \r\n\ \ \ \ prints\ the\ line\ out\ for\ the\ user\r\n\ \ \ \ Checks\ if\ the\ line\ contains\ "SQUIT",\r\n\ \ \ \ \ \ \ if\ so,\ close\ the\ socket,\ set\ serverIn\ and\ serverOut\ set\ the\ quit\ the\ program.\r\n\ \ \ \ \ \ if\ the\ line\ contains\ "PING",\ send\ a\ PONG\ message\ back\r\n\ \ \ \ \ \ \ \ (must\ be\ identical\ to\ the\ line,\ but\ with\ "PING"\ replaced\ by\ "PONG")\r\n\ \ \ Better\ version\ parses\ the\ line\ into\ source,\ command,\ params,\ finalParam\r\n\ \ \ \ (where\ the\ source\ and\ finalParam\ are\ optional,\ and\ params\ may\ be\ empty)\r\n\ \ \ \ Then\ deals\ with\ the\ message\ appropriately.\r\n
comment7.params=
comment7.target=void\ closeConnection()
comment7.text=\r\n\ Close\ the\ connection\:\r\n\ \ -\ close\ the\ socket,\r\n\ \ -\ set\ the\ serverIn\ and\ serverOut\ to\ null\r\n\ \ -\ print\ a\ message\ to\ the\ user\r\n
numComments=8
